# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tdk9ADOdhIYCrVS_YAhPfRnFQGdKBCso
"""

#!/usr/bin/env python
"""
Provides funtions for writing a file named with the type of filtered material(slope #) with the format:
    Value for Stiffness,Value for Density,Value for Modulus of Elasticity
    if they are higher or lower respect the value choice; example: higher,lower,higher
    Name,Density,Modulus of Elasticity (for all filtered material)
"""
import matplotlib
matplotlib.use('Agg')
import csv
import os

__author__ = "Bruno Paucar, Giovanny Chunga and Miguel Realpe"
__credits__ = ["Bruno Paucar", "Giovanny Chunga", "Miguel Realpe",
                    "Clotario Tapia"]
__license__ = "GNU GPL"
__version__ = "1.0.1"
__maintainer__ = "Miguel Realpe"
__email__ = "mrealpe@fiec.espol.edu.ec"
__status__ = "Prototype"

def escribirArchivos(listaMaterialesFinal,listaDensidadFinal,listaModuloFinal,familia,rigidez,densidad,modulo,slope_valor,densi_valor,modu_valor,pendiente):
    stiffness_ = ""
    densi_ = ""
    modu_ = ""
    if slope_valor == 1:
        stiffness_ += "Higher values for stiffness"
    else:
        stiffness_ += "Lower values for stiffness"
    if densi_valor == 1:
        densi_ += "Higher values for density"
    else:
        densi_ += "Lower values for density"
    if modu_valor == 1:
        modu_ += "Higher values for modulus of elasticity"
    else:
        modu_ += "Lower values for modulus of elasticity"
    nombre = "{}(slope {},stiffnees {},density {},modulus of elasticity {}).csv".format(familia, pendiente, rigidez,
                                                                                        densidad, modulo)

    archivo = open(nombre, 'w', newline="\n")
    writer = csv.writer(archivo, delimiter=',', quotechar='"')

    writer.writerow(["---- Descripcion ----"])
    writer.writerow(["Value for stiffness: {} --- Value for Density: {} ---- Value for Modulus of Elasticity: {}".format(rigidez,densidad,modulo)])
    writer.writerow(["{} --- {} ---- {}".format(stiffness_, densi_, modu_)])
    #archivoF.write("{}\t{}\t{}\n".format(stiffness_,densi_,modu_))
    writer.writerow(["---- Datos ----"])
    writer.writerow(["name","density","modulus of elasticity"])
    for contador in range(len(listaMaterialesFinal)):
        lista = [listaMaterialesFinal[contador],listaDensidadFinal[contador],listaModuloFinal[contador]]
        writer.writerow(lista)
    archivo.close()

#!/usr/bin/env python
"""
Provides funtions for loading data from a csv with the format:
    Name,Category,url,Density,Modulus of Elasticity
"""

import csv

__author__ = "Bruno Paucar, Giovanny Chunga and Miguel Realpe"
__credits__ = ["Bruno Paucar", "Giovanny Chunga", "Miguel Realpe",
                    "Clotario Tapia"]
__license__ = "GNU GPL"
__version__ = "1.0.1"
__maintainer__ = "Miguel Realpe"
__email__ = "mrealpe@fiec.espol.edu.ec"
__status__ = "Prototype"


def leerArchivo(archivoCsv):
    archivo = open(archivoCsv,'r',newline = '\n')
    reader = csv.reader(archivo,delimiter = ",", quotechar = '"')
    cabecera = next(reader)
    nombres = []
    tipos = []
    urls = []
    densidades = []
    modulosElasticidad = []
    d1 = {}
    nombresNoValor = []
    for linea in reader:
        nombre,categoria,url,densidad,modulo = linea
        categoria = categoria.split(';')
        if len(categoria) > 1:
            if categoria[0] == 'Ceramic' and categoria[1] == ' Glass':
                tipo = categoria[1][1:]
            else:
                tipo = categoria[0]
        else:
            tipo = categoria[0]
        if densidad == '0' or modulo == '0' or densidad == '' or modulo =='':
            nombresNoValor.append(nombre)
        else:
            nombres.append(nombre)
            tipos.append(tipo)
            urls.append(url)
            densidades.append(float(densidad))
            modulosElasticidad.append(float(modulo))
    for i in range(len(nombres)):
        d2 = {}
        d2["Family"] = tipos[i]
        d2["Density"] = densidades[i]
        d2["Modulus of Elasticity"] = modulosElasticidad[i]
        d2["Url"] = urls[i]
        d1[nombres[i]] = d2
    archivo.close()
    return(d1)

def obtenerModuloDensidad(dic):
    listaM = []
    listaDensidad = []
    listaModulo = []
    listaTipo = []
    for clave,valor in dic.items():
        listaM = list(dic.keys())
        listaDensidad.append(dic[clave]["Density"])
        listaModulo.append(dic[clave]["Modulus of Elasticity"])
        listaTipo.append(dic[clave]["Family"])
    return listaM,listaTipo,listaDensidad,listaModulo

#!/usr/bin/env python
"""
Provides filter funtions for Ashby Methodology
"""

import numpy as np

__author__ = "Bruno Paucar, Giovanny Chunga and Miguel Realpe"
__credits__ = ["Bruno Paucar", "Giovanny Chunga", "Miguel Realpe",
                    "Clotario Tapia"]
__license__ = "GNU GPL"
__version__ = "1.0.1"
__maintainer__ = "Miguel Realpe"
__email__ = "mrealpe@fiec.espol.edu.ec"
__status__ = "Prototype"


def filtrarTipo(listaMateriales,listaTipos,listaDensidades,listaModulos,tipo):
    listaM = []
    listaDensidad = []
    listaModulo = []
    for i in range(len(listaMateriales)):
        if listaTipos[i] == tipo :
            listaM.append(listaMateriales[i])
            listaDensidad.append(listaDensidades[i])
            listaModulo.append(listaModulos[i])
    return listaM,listaDensidad,listaModulo

def filtradoDensidad(listaMateriales,listaDensidad,listaModulo,densidad,densi_mayor):
    listaMateriales1 = []
    listaDensidad1 = []
    listaModulos1 = []
    for i in range(len(listaDensidad)):
        if densi_mayor and listaDensidad[i] > densidad:
                listaDensidad1.append(listaDensidad[i])
                listaMateriales1.append(listaMateriales[i])
                listaModulos1.append(listaModulo[i])
        elif not densi_mayor and listaDensidad[i] < densidad:
                listaDensidad1.append(listaDensidad[i])
                listaMateriales1.append(listaMateriales[i])
                listaModulos1.append(listaModulo[i])
    return listaMateriales1,listaDensidad1,listaModulos1

def filtradoModulo(listaMateriales,listaDensidad,listaModulo,modulo,modu_mayor):
    listaMateriales1 = []
    listaDensidad1 = []
    listaModulos1 = []
    for i in range(len(listaDensidad)):
        if modu_mayor and listaDensidad[i] > modulo:
                listaDensidad1.append(listaDensidad[i])
                listaMateriales1.append(listaMateriales[i])
                listaModulos1.append(listaModulo[i])
        elif not modu_mayor and listaDensidad[i] < modulo:
                listaDensidad1.append(listaDensidad[i])
                listaMateriales1.append(listaMateriales[i])
                listaModulos1.append(listaModulo[i])
    return listaMateriales1,listaDensidad1,listaModulos1

def filtradoModulo(listaMateriales,listaDensidad,listaModulo,modulo,modu_mayor):
    listaMateriales2 = []
    listaDensidad2 = []
    listaModulos2 = []
    if modu_mayor:
        for i in range(len(listaModulo)):
            if listaModulo[i] > modulo:
                listaDensidad2.append(listaDensidad[i])
                listaMateriales2.append(listaMateriales[i])
                listaModulos2.append(listaModulo[i])
    else:
        for i in range(len(listaModulo)):
            if listaModulo[i] < modulo:
                listaDensidad2.append(listaDensidad[i])
                listaMateriales2.append(listaMateriales[i])
                listaModulos2.append(listaModulo[i])
    return listaMateriales2,listaDensidad2,listaModulos2

def filtrarMateriales(listaMateriales,listaDensidad,listaModulo,pendiente,valor,slope_mayor):
    listaM2, listaD2, listaMod2 = [], [], []
    if pendiente == 1:
        if slope_mayor:
            for i in range(len(listaMateriales)):
                if listaModulo[i] > valor * listaDensidad[i]:
                    listaM2.append(listaMateriales[i])
                    listaD2.append(listaDensidad[i])
                    listaMod2.append(listaModulo[i])
        else:
            for i in range(len(listaMateriales)):
                if listaModulo[i] < valor * listaDensidad[i]:
                    listaM2.append(listaMateriales[i])
                    listaD2.append(listaDensidad[i])
                    listaMod2.append(listaModulo[i])
    elif pendiente == 2:
        if slope_mayor:
            for i in range(len(listaMateriales)):
                if listaModulo[i] > (valor * listaDensidad[i])**2:
                    listaM2.append(listaMateriales[i])
                    listaD2.append(listaDensidad[i])
                    listaMod2.append(listaModulo[i])
        else:
            for i in range(len(listaMateriales)):
                if listaModulo[i] < (valor * listaDensidad[i])**2:
                    listaM2.append(listaMateriales[i])
                    listaD2.append(listaDensidad[i])
                    listaMod2.append(listaModulo[i])
    elif pendiente == 3:
        if slope_mayor:
            for i in range(len(listaMateriales)):
                if listaModulo[i] > (valor * listaDensidad[i])**3:
                    listaM2.append(listaMateriales[i])
                    listaD2.append(listaDensidad[i])
                    listaMod2.append(listaModulo[i])
        else:
            for i in range(len(listaMateriales)):
                if listaModulo[i] < (valor * listaDensidad[i])**3:
                    listaM2.append(listaMateriales[i])
                    listaD2.append(listaDensidad[i])
                    listaMod2.append(listaModulo[i])
    return listaM2, listaD2, listaMod2


def filtrar(listaMateriales,listaTipos,listaDensidades,listaModulos,tipo,densidad,densi_mayor,modulo, modu_mayor,pendiente, rigidez,slope_mayor):
    listaMateriales2, listaDensidad2, listaModulo2 = filtrarTipo(listaMateriales, listaTipos, listaDensidades,listaModulos, tipo)
    listaMateriales3, listaDensidad3, listaModulo3 = filtradoDensidad(listaMateriales2, listaDensidad2,listaModulo2, densidad, densi_mayor)
    listaMateriales4, listaDensidad4, listaModulo4 = filtradoModulo(listaMateriales3, listaDensidad3,listaModulo3, modulo, modu_mayor)
    listaMaterialesFinal,listaDensidadFinal,listaModuloFinal  = filtrarMateriales(listaMateriales4,listaDensidad4, listaModulo4,pendiente, rigidez,slope_mayor)
    return listaMaterialesFinal,listaDensidadFinal,listaModuloFinal


#Cuando se tienen mas de 10k materiales en total o se esperan mas de 500 filtrados es preferible utilizar el filtro por arreglos
def filtrarArreglos(listaMateriales,listaTipos,listaDensidades,listaModulos,tipo,densidad,densi_mayor,modulo, modu_mayor):
    arregloMateriales = np.array(listaMateriales)
    arregloTipos = np.array(listaTipos)
    arregloDensidades = np.array(listaDensidades)
    arregloModulos = np.array(listaModulos)
    condicion1=arregloTipos==tipo
    if densi_mayor:
        condicion2 = arregloDensidades > densidad
    else:
        condicion2 = arregloDensidades < densidad
    if modu_mayor:
        condicion3 = arregloModulos > modulo
    else:
        condicion3 = arregloModulos < modulo
    return arregloMateriales[(condicion1)&(condicion2)&(condicion3)],\
           arregloDensidades[(condicion1)&(condicion2)&(condicion3)],\
           arregloModulos[(condicion1)&(condicion2)&(condicion3)]

#!/usr/bin/env python
"""
Provides funtions for plotting chart of "DENSITY vs MODULUS OF E" for Ashby Methodology.
"""

import matplotlib.pyplot as plt
import numpy as np

__author__ = "Bruno Paucar, Giovanny Chunga and Miguel Realpe"
__credits__ = ["Bruno Paucar", "Giovanny Chunga", "Miguel Realpe",
                    "Clotario Tapia"]
__license__ = "GNU GPL"
__version__ = "1.0.1"
__maintainer__ = "Miguel Realpe"
__email__ = "mrealpe@fiec.espol.edu.ec"
__status__ = "Prototype"

def recta1(n):
    x= np.linspace(0.0001,1000)
    y = n * x
    plt.loglog(x,y,'-', label='E/ρ,{}'.format(n))

def recta2(n):
    x = np.linspace(0.0001,1000)
    y = (n * x)**2
    plt.loglog(x, y, '-', label='E^(1/2)/ρ,{}'.format(n))

def recta3(n):
    x = np.linspace(0.0001,1000)
    y = (n * x) ** 3
    plt.loglog(x, y, '-', label='E^(1/3)/ρ,{}'.format(n))

def densidadVertical(densidad,maximoD):
    plt.loglog([densidad,densidad],[0,maximoD],'C1')

def ModuloHorizontal(modulo,maximoModulo):
    plt.loglog([0,maximoModulo],[modulo,modulo], 'C3')

def grafica(diccionario,listaDensidad,listaModulo,listaMaterialesFiltrada,listaDensidadFiltrada,listaModuloFiltrada,densidad,modulo,rigidez,pendiente):
    leyendaFamilias={'Glass':'m.',
                     'Ceramic': 'c.',
                     'Carbon': 'k+',
                     'Metal':'r.',
                     'Wood and Natural Products': 'g+',
                     'Polymer':'y.',
                     'Fluid':'b.',
                     'Pure Element':'r+',
                     'Other Engineering Material':'c^'}
    #gráfico 1
    plt.figure('Gráfico 1')
    plt.title('Grafico de Ashby')
    tipos = []
    for claves, datos in diccionario.items():
        familia = datos['Family']
        density = datos['Density']
        modulus = datos['Modulus of Elasticity']
        signo=leyendaFamilias.get(familia,'bX')
        plt.plot(density, modulus, signo)
        if familia not in tipos:
            tipos.append(familia)
            plt.plot(density, modulus, signo,label=familia)
    if pendiente == 1:
        recta1(rigidez)
    elif pendiente == 2:
        recta2(rigidez)
    elif pendiente == 3:
        recta3(rigidez)
    densidadVertical(densidad, max(listaModulo))
    ModuloHorizontal(modulo, max(listaDensidad))
    plt.grid()
    plt.xlabel('Density. ρ (Kg/m^3)')
    plt.ylabel('Modulus of Elasticity. E(GPa)')
    plt.legend(loc='upper left')

    #grafico 2
    plt.figure('Gráfico 2')
    plt.title('Materiales Filtrados')
    tipos = []
    for indiceFiltrada in range(len(listaMaterialesFiltrada)):
        familia = diccionario[listaMaterialesFiltrada[indiceFiltrada]]['Family']
        density = listaDensidadFiltrada[indiceFiltrada]
        modulus = listaModuloFiltrada[indiceFiltrada]
        signo=leyendaFamilias.get(familia,'bX')
        plt.plot(density, modulus, signo)
        #plt.text(density, modulus, '{}'.format(listaMaterialesFiltrada[indiceFiltrada]))
        if familia not in tipos:
            tipos.append(familia)
            plt.plot(density, modulus, signo,label=familia)
    if pendiente == 1:
        recta1(rigidez)
    elif pendiente == 2:
        recta2(rigidez)
    elif pendiente == 3:
        recta3(rigidez)
    densidadVertical(densidad, max(listaModulo))
    ModuloHorizontal(modulo, max(listaDensidad))
    plt.grid()
    plt.xlabel('Density. ρ (Kg/m^3)')
    plt.ylabel('Modulus of Elasticity. E(GPa)')
    plt.legend(loc='upper left')

"""
def Provides interface for Ashby Methodology
"""

import tkinter as tk
from tkinter import ttk
from tkinter import messagebox

__author__ = "Bruno Paucar, Giovanny Chunga and Miguel Realpe"
__credits__ = ["Bruno Paucar", "Giovanny Chunga", "Miguel Realpe",
                    "Clotario Tapia"]
__license__ = "GNU GPL"
__version__ = "1.0.1"
__maintainer__ = "Miguel Realpe"
__email__ = "mrealpe@fiec.espol.edu.ec"
__status__ = "Prototype"



def interfaz():

    def closeProgram():
        exit()

    interfaz = tk.Tk()
    interfaz.title("Density vs Yougn's Modulus Charts")
    interfaz.geometry('360x380')
    interfaz.protocol('WM_DELETE_WINDOW', closeProgram)

    # firts linea
    title = ttk.Label(interfaz, text='Select the options to optimize the values').place(x=70, y=0)
    # slope
    pendiente = ttk.Label(interfaz, text='Slope').place(x=20, y=40)


    combo_slope = ttk.Combobox(interfaz, width=9, state='readonly')
    combo_slope.place(x=80, y=40)
    combo_slope['values'] = (1, 2, 3)
    combo_slope.set(1)
    # family
    familia = ttk.Label(interfaz, text='Family').place(x=20, y=70)
    combo_family = ttk.Combobox(interfaz, width=22, state='readonly')
    combo_family.place(x=80, y=70)
    combo_family['values'] = ("Carbon","Ceramic", "Glass", "Fluid", "Metal", "Other Engineering Material", "Polymer","Pure Element", "Wood and Natural Products")
    combo_family.current(4)
    # stiffness info
    stifness_name = ttk.Label(interfaz, text='Stiffness').place(x=20, y=100)
    stif_entry = ttk.Entry(interfaz, width=12)
    stif_entry.place(x=80, y=100)
    stif_entry.insert(0, 0.0)
    check_value5 = tk.IntVar()
    slope_mayor5 = ttk.Radiobutton(interfaz, text='Higher values',value=1,variable=check_value5).place(x=25, y=130)
    slope_menor6 = ttk.Radiobutton(interfaz, text='Lower values', value=0,variable=check_value5).place(x=150, y=130)
    # Density info
    second_title = ttk.Label(interfaz, text='General property ').place(x=15, y=155)
    density_name = ttk.Label(interfaz, text='Density').place(x=20, y=180)
    density_entry = ttk.Entry(interfaz, width=12)
    density_entry.place(x=80, y=180)
    density_entry.insert(0, 0.0)
    densityDimensional = ttk.Label(interfaz, text='kg/m^3').place(x=170, y=180)

    check_value1 = tk.IntVar()
    density_mayor1 = ttk.Radiobutton(interfaz, text='Higher values', value = 1,variable = check_value1).place(x=25, y=210)
    density_menor2 = ttk.Radiobutton(interfaz, text='Lower values', value = 0 ,variable = check_value1).place(x=150, y=210)
    # Modulus info
    thrid_title = ttk.Label(interfaz, text='Mechanical property').place(x=15, y=240)
    modulus_name = ttk.Label(interfaz, text='Modulus of Elasticity').place(x=15, y=265)
    modulus_entry = ttk.Entry(interfaz, width=12)
    modulus_entry.place(x=150, y=265)
    modulus_entry.insert(0, 0.0)
    modulusDimensional = ttk.Label(interfaz, text='GPa').place(x=238, y=265)

    check_value3 = tk.IntVar()
    modulus_mayor3 = ttk.Radiobutton(interfaz, text='Higher values', value=1,variable=check_value3).place(x=25, y=290)
    modulus_menor4 = ttk.Radiobutton(interfaz, text='Lower values', value=0 ,variable=check_value3).place(x=150, y=290)

    # buttons
    def action():
        messagebox.showinfo('PAY ATTENTION',"There are many ways to select the options, if you let the box empty ('') it will plot a predeterminated value, if you let '0.0' means no straight plot.")
        print(
            'Has chosen an index of ' + '"' + combo_slope.get() + '"' + ' to optimize stiffness  with  a value ' + '"' + stif_entry.get() + '"' + ', to optimize density with ' + '"' + density_entry.get() + '"' + ' and modulus of elasticity with ' + '"' + modulus_entry.get() + '"' + ', with higher, lower or both values.')
        print('The material belongs to the family of ' + '"' + combo_family.get() + '".')

    boton1 = ttk.Button(interfaz, text='Submit', command=action)
    boton1.place(x=20, y=330)

    boton2 = ttk.Button(interfaz, text='Continue', command=interfaz.quit)
    boton2.place(x=270, y=330)

    def call():
        messagebox.showinfo('IMPORTANT','''You're able to  select at most 3 options(stiffness-density-modulus) with a different slope for each one, choose a family of material, enter only numbers, and select higher or lower values.''')

    boton3 = ttk.Button(interfaz, text='Info', command=call)
    boton3.place(x=270, y=40)

    interfaz.mainloop()
    pendiente = int(combo_slope.get())
    familia = str(combo_family.get())
    slope_valor = bool(check_value5.get())
    rigidez = float(stif_entry.get())
    densidad = float(density_entry.get())
    modulo = float(modulus_entry.get())
    densi_valor = bool(check_value1.get())
    modu_valor= bool(check_value3.get())
    interfaz.destroy()

    return pendiente,familia,slope_valor,0,rigidez,densidad,modulo,densi_valor,0,modu_valor,0

#!/usr/bin/env python
"""
Software for materials selection using Ashby Methodology
chart:  DENSITY vs MODULUS OF E
dataset: datos.csv
"""
# import modulos.interfaz as interfaz
# import modulos.extraerInformacion as extraerInformacion
# import modulos.filtrar as filtrar
# import modulos.grafica as grafica
# import modulos.escribirArchivos as escribirArchivos

__author__ = "Bruno Paucar, Giovanny Chunga and Miguel Realpe"
__credits__ = ["Bruno Paucar", "Giovanny Chunga", "Miguel Realpe",
                    "Clotario Tapia"]
__license__ = "GNU GPL"
__version__ = "1.0.1"
__maintainer__ = "Miguel Realpe"
__email__ = "mrealpe@fiec.espol.edu.ec"
__status__ = "Prototype"

print('----------SOFTWARE "DENSITY vs MODULUS OF E" CHART----------')

print('Loading Dataset...')
#Cargar materiales de la base de datos
diccionario = leerArchivo("datos.csv")

#Extraer los datos de los materiales en listas
listaMateriales,listaTipos,listaDensidad,listaModulo = obtenerModuloDensidad(diccionario)
print('Dataset Loaded')

#Obtener todas las variables ingresadas en la interfaz grafica
pendiente,familia,slope_mayor,slope_menor,rigidez,densidad,modulo,densi_mayor,densi_menor,modu_mayor,modu_menor = interfaz()

#Filtrar datos por Familia, Modulo, Densidad y Pendiente
listaMaterialesFinal,listaDensidadFinal,listaModuloFinal = filtrar.filtrar(listaMateriales,listaTipos,listaDensidad,listaModulo,familia,densidad,densi_mayor,modulo, modu_mayor,pendiente,rigidez,slope_mayor)

#Si la cantidad de materiales filtrados supera los 500, es preferible utilizar arreglos (procesamiento mas rapido)
#listaMaterialesFinal,listaDensidadFinal,listaModuloFinal = filtrar.filtrarArreglos(listaMateriales,listaTipos,listaDensidad,listaModulo,familia,densidad,densi_mayor,modulo, modu_mayor)

#Escribir Archivos de texto
escribirArchivos.escribirArchivos(listaMaterialesFinal,listaDensidadFinal,listaModuloFinal,familia,rigidez,densidad,modulo,slope_mayor,densi_mayor,modu_mayor,pendiente)

#Graficar valores
g = grafica.grafica(diccionario,listaDensidad,listaModulo,listaMaterialesFinal,listaDensidadFinal,listaModuloFinal,densidad,modulo,rigidez,pendiente)


#reportar resultados
print("Filtrated materials are: ",listaMaterialesFinal)
print("The densities respectives: ",listaDensidadFinal)
print("The modulus respectives: ",listaModuloFinal)
plt.show(g)